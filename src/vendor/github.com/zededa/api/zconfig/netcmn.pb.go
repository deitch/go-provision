// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netcmn.proto

/*
Package zconfig is a generated protocol buffer package.

It is generated from these files:
	netcmn.proto
	service.proto
	fw.proto
	vm.proto
	devconfig.proto
	devcommon.proto
	storage.proto
	netinst.proto
	appconfig.proto
	netconfig.proto
	baseosconfig.proto

It has these top-level messages:
	IpRange
	ProxyServer
	ProxyConfig
	ZnetStaticDNSEntry
	Ipspec
	ServiceOpaqueConfig
	ServiceLispConfig
	ServiceInstanceConfig
	ACEMatch
	ACEAction
	ACE
	VmConfig
	MapServer
	ZedServer
	DeviceLispDetails
	DeviceOpsCmd
	SWAdapterParams
	SystemAdapter
	EdgeDevConfig
	ConfigItem
	ConfigRequest
	ConfigResponse
	UUIDandVersion
	Adapter
	ZcServicePoint
	SignatureInfo
	DatastoreConfig
	Image
	Drive
	NetworkInstanceOpaqueConfig
	NetworkInstanceLispConfig
	NetworkInstanceConfig
	InstanceOpsCmd
	AppInstanceConfig
	NetworkConfig
	NetworkAdapter
	OSKeyTags
	OSVerDetails
	BaseOSConfig
*/
package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProxyProto int32

const (
	ProxyProto_PROXY_HTTP  ProxyProto = 0
	ProxyProto_PROXY_HTTPS ProxyProto = 1
	ProxyProto_PROXY_SOCKS ProxyProto = 2
	ProxyProto_PROXY_FTP   ProxyProto = 3
	ProxyProto_PROXY_OTHER ProxyProto = 255
)

var ProxyProto_name = map[int32]string{
	0:   "PROXY_HTTP",
	1:   "PROXY_HTTPS",
	2:   "PROXY_SOCKS",
	3:   "PROXY_FTP",
	255: "PROXY_OTHER",
}
var ProxyProto_value = map[string]int32{
	"PROXY_HTTP":  0,
	"PROXY_HTTPS": 1,
	"PROXY_SOCKS": 2,
	"PROXY_FTP":   3,
	"PROXY_OTHER": 255,
}

func (x ProxyProto) String() string {
	return proto.EnumName(ProxyProto_name, int32(x))
}
func (ProxyProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DHCPType int32

const (
	DHCPType_DHCPNoop DHCPType = 0
	// used for device adapter
	DHCPType_Static DHCPType = 1
	// used for application simulation
	DHCPType_PassThrough DHCPType = 2
	// used for application simulation
	DHCPType_Server DHCPType = 3
	// used for device adapter
	DHCPType_Client DHCPType = 4
)

var DHCPType_name = map[int32]string{
	0: "DHCPNoop",
	1: "Static",
	2: "PassThrough",
	3: "Server",
	4: "Client",
}
var DHCPType_value = map[string]int32{
	"DHCPNoop":    0,
	"Static":      1,
	"PassThrough": 2,
	"Server":      3,
	"Client":      4,
}

func (x DHCPType) String() string {
	return proto.EnumName(DHCPType_name, int32(x))
}
func (DHCPType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NetworkType int32

const (
	NetworkType_NETWORKTYPENOOP NetworkType = 0
	NetworkType_V4              NetworkType = 4
	NetworkType_V6              NetworkType = 6
	NetworkType_CryptoV4        NetworkType = 24
	NetworkType_CryptoV6        NetworkType = 26
	NetworkType_CryptoEID       NetworkType = 14
)

var NetworkType_name = map[int32]string{
	0:  "NETWORKTYPENOOP",
	4:  "V4",
	6:  "V6",
	24: "CryptoV4",
	26: "CryptoV6",
	14: "CryptoEID",
}
var NetworkType_value = map[string]int32{
	"NETWORKTYPENOOP": 0,
	"V4":              4,
	"V6":              6,
	"CryptoV4":        24,
	"CryptoV6":        26,
	"CryptoEID":       14,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}
func (NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type IpRange struct {
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *IpRange) Reset()                    { *m = IpRange{} }
func (m *IpRange) String() string            { return proto.CompactTextString(m) }
func (*IpRange) ProtoMessage()               {}
func (*IpRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IpRange) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *IpRange) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

type ProxyServer struct {
	Proto  ProxyProto `protobuf:"varint,1,opt,name=proto,enum=ProxyProto" json:"proto,omitempty"`
	Server string     `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Port   uint32     `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
}

func (m *ProxyServer) Reset()                    { *m = ProxyServer{} }
func (m *ProxyServer) String() string            { return proto.CompactTextString(m) }
func (*ProxyServer) ProtoMessage()               {}
func (*ProxyServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProxyServer) GetProto() ProxyProto {
	if m != nil {
		return m.Proto
	}
	return ProxyProto_PROXY_HTTP
}

func (m *ProxyServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ProxyServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ProxyConfig struct {
	// enable network level proxy in the form of WPAD
	NetworkProxyEnable bool `protobuf:"varint,1,opt,name=networkProxyEnable" json:"networkProxyEnable,omitempty"`
	// dedicated per protocol information
	Proxies []*ProxyServer `protobuf:"bytes,2,rep,name=proxies" json:"proxies,omitempty"`
	// exceptions seperated by commas
	Exceptions string `protobuf:"bytes,3,opt,name=exceptions" json:"exceptions,omitempty"`
	// or pacfile can be in place of others
	// base64 encoded
	Pacfile string `protobuf:"bytes,4,opt,name=pacfile" json:"pacfile,omitempty"`
	// Direct URL for wpad.dat download
	NetworkProxyURL string `protobuf:"bytes,5,opt,name=networkProxyURL" json:"networkProxyURL,omitempty"`
}

func (m *ProxyConfig) Reset()                    { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string            { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()               {}
func (*ProxyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProxyConfig) GetNetworkProxyEnable() bool {
	if m != nil {
		return m.NetworkProxyEnable
	}
	return false
}

func (m *ProxyConfig) GetProxies() []*ProxyServer {
	if m != nil {
		return m.Proxies
	}
	return nil
}

func (m *ProxyConfig) GetExceptions() string {
	if m != nil {
		return m.Exceptions
	}
	return ""
}

func (m *ProxyConfig) GetPacfile() string {
	if m != nil {
		return m.Pacfile
	}
	return ""
}

func (m *ProxyConfig) GetNetworkProxyURL() string {
	if m != nil {
		return m.NetworkProxyURL
	}
	return ""
}

// These are list of static mapping that can be added to network
type ZnetStaticDNSEntry struct {
	HostName string   `protobuf:"bytes,1,opt,name=HostName" json:"HostName,omitempty"`
	Address  []string `protobuf:"bytes,2,rep,name=Address" json:"Address,omitempty"`
}

func (m *ZnetStaticDNSEntry) Reset()                    { *m = ZnetStaticDNSEntry{} }
func (m *ZnetStaticDNSEntry) String() string            { return proto.CompactTextString(m) }
func (*ZnetStaticDNSEntry) ProtoMessage()               {}
func (*ZnetStaticDNSEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ZnetStaticDNSEntry) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZnetStaticDNSEntry) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

// Common for IPv4 and IPv6
type Ipspec struct {
	Dhcp DHCPType `protobuf:"varint,2,opt,name=dhcp,enum=DHCPType" json:"dhcp,omitempty"`
	// subnet is CIDR format...x.y.z.l/nn
	Subnet  string   `protobuf:"bytes,3,opt,name=subnet" json:"subnet,omitempty"`
	Gateway string   `protobuf:"bytes,5,opt,name=gateway" json:"gateway,omitempty"`
	Domain  string   `protobuf:"bytes,6,opt,name=domain" json:"domain,omitempty"`
	Ntp     string   `protobuf:"bytes,7,opt,name=ntp" json:"ntp,omitempty"`
	Dns     []string `protobuf:"bytes,8,rep,name=dns" json:"dns,omitempty"`
	// for IPAM management when dhcp is turned on.
	// If none provided, system will default pool.
	DhcpRange *IpRange `protobuf:"bytes,9,opt,name=dhcpRange" json:"dhcpRange,omitempty"`
}

func (m *Ipspec) Reset()                    { *m = Ipspec{} }
func (m *Ipspec) String() string            { return proto.CompactTextString(m) }
func (*Ipspec) ProtoMessage()               {}
func (*Ipspec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ipspec) GetDhcp() DHCPType {
	if m != nil {
		return m.Dhcp
	}
	return DHCPType_DHCPNoop
}

func (m *Ipspec) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *Ipspec) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Ipspec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Ipspec) GetNtp() string {
	if m != nil {
		return m.Ntp
	}
	return ""
}

func (m *Ipspec) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *Ipspec) GetDhcpRange() *IpRange {
	if m != nil {
		return m.DhcpRange
	}
	return nil
}

func init() {
	proto.RegisterType((*IpRange)(nil), "ipRange")
	proto.RegisterType((*ProxyServer)(nil), "ProxyServer")
	proto.RegisterType((*ProxyConfig)(nil), "ProxyConfig")
	proto.RegisterType((*ZnetStaticDNSEntry)(nil), "ZnetStaticDNSEntry")
	proto.RegisterType((*Ipspec)(nil), "ipspec")
	proto.RegisterEnum("ProxyProto", ProxyProto_name, ProxyProto_value)
	proto.RegisterEnum("DHCPType", DHCPType_name, DHCPType_value)
	proto.RegisterEnum("NetworkType", NetworkType_name, NetworkType_value)
}

func init() { proto.RegisterFile("netcmn.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0x5e, 0xda, 0x2e, 0x6d, 0xae, 0x5b, 0x67, 0x19, 0x84, 0xa2, 0x49, 0x83, 0xd2, 0x87, 0xa9,
	0xda, 0x43, 0x26, 0xca, 0xb4, 0x67, 0xa0, 0x2b, 0x2a, 0x0c, 0xda, 0xc8, 0x0d, 0x83, 0x4d, 0xa0,
	0x29, 0x4d, 0xbc, 0xd6, 0xa2, 0xb5, 0xad, 0xc4, 0x65, 0xed, 0xfe, 0x1b, 0x3f, 0x80, 0x5f, 0x05,
	0xb2, 0x9d, 0xd2, 0x0a, 0xf1, 0x94, 0xfb, 0xbe, 0xb3, 0xbf, 0xfb, 0x72, 0x77, 0x86, 0x3d, 0x4e,
	0x55, 0x32, 0xe7, 0x81, 0xcc, 0x84, 0x12, 0xad, 0x17, 0x50, 0x65, 0x92, 0xc4, 0x7c, 0x42, 0xf1,
	0x63, 0xd8, 0xcd, 0x55, 0x9c, 0x29, 0xdf, 0x69, 0x3a, 0x6d, 0x8f, 0x58, 0x80, 0x11, 0x94, 0x29,
	0x4f, 0xfd, 0x92, 0xe1, 0x74, 0xd8, 0xfa, 0x0a, 0xf5, 0x30, 0x13, 0xcb, 0xd5, 0x88, 0x66, 0x3f,
	0x68, 0x86, 0x9f, 0xc3, 0xae, 0x91, 0x32, 0xd7, 0x1a, 0x9d, 0xba, 0x16, 0x5e, 0xae, 0x42, 0x4d,
	0x11, 0x9b, 0xc1, 0x4f, 0xc0, 0xcd, 0xcd, 0xe1, 0x42, 0xa6, 0x40, 0x18, 0x43, 0x45, 0x8a, 0x4c,
	0xf9, 0xe5, 0xa6, 0xd3, 0xde, 0x27, 0x26, 0x6e, 0xfd, 0x72, 0x0a, 0xf9, 0xae, 0xe0, 0x77, 0x6c,
	0x82, 0x03, 0xc0, 0x9c, 0xaa, 0x7b, 0x91, 0x7d, 0x37, 0x6c, 0x8f, 0xc7, 0xe3, 0x19, 0x35, 0xb5,
	0x6a, 0xe4, 0x3f, 0x19, 0x7c, 0x0c, 0x55, 0x6d, 0x80, 0xd1, 0xdc, 0x2f, 0x35, 0xcb, 0xed, 0x7a,
	0x67, 0x2f, 0xd8, 0x72, 0x4b, 0xd6, 0x49, 0xfc, 0x14, 0x80, 0x2e, 0x13, 0x2a, 0x15, 0x13, 0x3c,
	0x37, 0x0e, 0x3c, 0xb2, 0xc5, 0x60, 0x1f, 0xaa, 0x32, 0x4e, 0xee, 0xd8, 0x8c, 0xfa, 0x15, 0x93,
	0x5c, 0x43, 0xdc, 0x86, 0x83, 0xed, 0xba, 0x9f, 0xc8, 0x07, 0x7f, 0xd7, 0x9c, 0xf8, 0x97, 0x6e,
	0xbd, 0x07, 0x7c, 0xc3, 0xa9, 0x1a, 0xa9, 0x58, 0xb1, 0xe4, 0x62, 0x30, 0xea, 0x71, 0x95, 0xad,
	0xf0, 0x21, 0xd4, 0xfa, 0x22, 0x57, 0x83, 0x78, 0x4e, 0x8b, 0x56, 0xff, 0xc5, 0xba, 0xea, 0xeb,
	0x34, 0xcd, 0x68, 0x6e, 0xdd, 0x7b, 0x64, 0x0d, 0x5b, 0x3f, 0x1d, 0x70, 0x99, 0xcc, 0x25, 0x4d,
	0xf0, 0x11, 0x54, 0xd2, 0x69, 0x22, 0x4d, 0x33, 0x1b, 0x1d, 0x2f, 0xb8, 0xe8, 0x77, 0xc3, 0x68,
	0x25, 0x29, 0x31, 0xb4, 0xe9, 0xf6, 0x62, 0xcc, 0xa9, 0x2a, 0xfe, 0xaa, 0x40, 0x5a, 0x7b, 0x12,
	0x2b, 0x7a, 0x1f, 0xaf, 0x0a, 0xbf, 0x6b, 0xa8, 0x6f, 0xa4, 0x62, 0x1e, 0x33, 0xee, 0xbb, 0xf6,
	0x86, 0x45, 0x7a, 0xf6, 0x5c, 0x49, 0xbf, 0x6a, 0x67, 0xcf, 0x95, 0xd4, 0x4c, 0xca, 0x73, 0xbf,
	0x66, 0xbc, 0xe9, 0x10, 0x1f, 0x83, 0xa7, 0xab, 0x9a, 0x15, 0xf2, 0xbd, 0xa6, 0xd3, 0xae, 0x77,
	0x6a, 0x41, 0xb1, 0x52, 0x64, 0x93, 0x3a, 0xb9, 0x05, 0xd8, 0x2c, 0x06, 0x6e, 0x00, 0x84, 0x64,
	0xf8, 0xe5, 0xfa, 0xb6, 0x1f, 0x45, 0x21, 0xda, 0xc1, 0x07, 0x50, 0xdf, 0xe0, 0x11, 0x72, 0x36,
	0xc4, 0x68, 0xd8, 0xbd, 0x1c, 0xa1, 0x12, 0xde, 0x07, 0xcf, 0x12, 0x6f, 0xa3, 0x10, 0x95, 0x31,
	0x5a, 0xe7, 0x87, 0x51, 0xbf, 0x47, 0xd0, 0x6f, 0xe7, 0xe4, 0x23, 0xd4, 0xd6, 0x8d, 0xc0, 0x7b,
	0x36, 0x1e, 0x08, 0x21, 0xd1, 0x0e, 0x06, 0x70, 0xed, 0x08, 0x0a, 0xdd, 0x38, 0xcf, 0xa3, 0x69,
	0x26, 0x16, 0x93, 0x29, 0x2a, 0x99, 0xa4, 0x59, 0x0d, 0x54, 0xd6, 0x71, 0x77, 0xc6, 0x28, 0x57,
	0xa8, 0x72, 0xf2, 0x0d, 0xea, 0x03, 0x3b, 0x4e, 0xa3, 0xf8, 0x08, 0x0e, 0x06, 0xbd, 0xe8, 0xf3,
	0x90, 0x5c, 0x46, 0xd7, 0x61, 0x6f, 0x30, 0x1c, 0x6a, 0xd7, 0x2e, 0x94, 0xae, 0xce, 0x50, 0xc5,
	0x7c, 0xcf, 0x91, 0xab, 0xcb, 0x76, 0xb3, 0x95, 0x54, 0xe2, 0xea, 0x0c, 0xf9, 0x5b, 0xe8, 0x1c,
	0x1d, 0x6a, 0xff, 0x16, 0xf5, 0xde, 0x5d, 0xa0, 0xc6, 0x9b, 0x57, 0xf0, 0x2c, 0x11, 0xf3, 0xe0,
	0x81, 0xa6, 0x34, 0x8d, 0x83, 0x64, 0x26, 0x16, 0x69, 0xb0, 0xd0, 0xcf, 0x82, 0x25, 0xd4, 0x3e,
	0xcd, 0x9b, 0xa3, 0x09, 0x53, 0xd3, 0xc5, 0x38, 0x48, 0xc4, 0xfc, 0xd4, 0x9e, 0x3b, 0x8d, 0x25,
	0x3b, 0x7d, 0x48, 0xcc, 0xc3, 0x18, 0xbb, 0xe6, 0xd4, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x16, 0x9c, 0xec, 0xd0, 0x03, 0x00, 0x00,
}
